name: Benchmark CML

on:
  workflow_dispatch:
    inputs:
      git-ref:
        description: Repo reference (branch, tag or SHA)
        default: "main"
        required: true
        type: string
      list:
        description: Which kind of list to consider
        default: "short"
        type: choice
        options:
          - "long"
          - "short"
      classification:
        description: Whether to launch classification benchmarks or not
        default: true
        type: boolean
      regression:
        description: Whether to launch regression benchmarks or not
        default: true
        type: boolean
      glm:
        description: Whether to launch glm benchmarks or not
        default: true
        type: boolean
      instance_type:
        description: Instance type on which to launch benchmarks
        default: "c5.4xlarge"
        type: choice
        options:
          - "c5.large"
          - "c5.xlarge"
          - "c5.2xlarge"
          - "c5.4xlarge"
          - "c5.12xlarge"
  # FIXME: Add recurrent launching
  # https://github.com/zama-ai/concrete-ml-internal/issues/1851

# Global environnement variables
env:
  # Github action url (used by slack notification)
  ACTION_RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
  AGENT_TOOLSDIRECTORY: /opt/hostedtoolcache
  RUNNER_TOOL_CACHE: /opt/hostedtoolcache

# Jobs
jobs:
  prepare-scripts:
    name: Prepare scripts to launch on individual AWS instances
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    container:
      image: ubuntu:20.04
    outputs:
      commands: ${{ steps.prepare-commands.outputs.commands }}
      length: ${{ steps.prepare-commands.outputs.length }}
    env:
      PIP_INDEX_URL: ${{ secrets.PIP_INDEX_URL }}
      PIP_EXTRA_INDEX_URL: ${{ secrets.PIP_EXTRA_INDEX_URL }}
    steps:
      - name: Add masks
        run: |
          echo "::add-mask::${{ secrets.INTERNAL_PYPI_URL_FOR_MASK }}"
          echo "::add-mask::${{ secrets.INTERNAL_REPO_URL_FOR_MASK }}"
          echo "::add-mask::${{ secrets.INTERNAL_PYPI_URL }}"
          echo "::add-mask::${{ secrets.INTERNAL_REPO_URL }}"
      - name: Docker container related setup and git installation
        id: docker-git-config
        run: |
          TZ=Europe/Paris
          echo "TZ=${TZ}" >> "$GITHUB_ENV"
          ln -snf /usr/share/zoneinfo/${TZ} /etc/localtime && echo ${TZ} > /etc/timezone
          sed -i 's|^deb http://archive|deb http://fr.archive|g' /etc/apt/sources.list
          apt update && apt install git git-lfs -y
          apt -y install sudo

      # We don't need to specify the git-ref here since he are just generating the cli arguments 
      - name: Checkout code
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8

      - name: Set up Python
        uses: actions/setup-python@2c3dd9e7e29afd70cc0950079bde6c979d1f69f9
        with:
          python-version: "3.9"

      - name: Install dependencies
        id: install-deps
        run: |
          apt update
          apt install --no-install-recommends -y gnome-keyring
          apt install -y graphviz* graphviz-dev libgraphviz-dev pkg-config python3-dev
          apt-mark hold docker.io
          ./script/make_utils/setup_os_deps.sh
          make setup_env

      - name: Prepare scripts to launch on individual AWS instances
        id: prepare-commands
        run: |
          source .venv/bin/activate
          python3 ./script/actions_utils/generate_scripts_benchmark.py --list_length ${{ github.event.inputs.list }} --classification ${{ github.event.inputs.classification }} --regression ${{ github.event.inputs.regression }} --glm ${{ github.event.inputs.glm }} > commands.json
          # Needs to be done before populating COMMANDS otherwise it will crash
          LENGTH=$(jq length commands.json)
          COMMANDS=$(<commands.json)
          export COMMANDS
          # Echo for debug purposes
          echo "${COMMANDS}"
          echo "${LENGTH}"
          # Set output
          echo "commands=${COMMANDS}" >> $GITHUB_OUTPUT
          echo "length=${LENGTH}" >> $GITHUB_OUTPUT


  run-job:
    needs: [prepare-scripts]
    secrets: inherit
    strategy:
      # To avoid stopping all workflows if one fails
      fail-fast: false
      matrix:
        index: ${{ fromJson(needs.prepare-scripts.outputs.commands) }}
      max-parallel: ${{ fromJson(needs.prepare-scripts.outputs.length) }}
    uses: ./.github/workflows/single_benchmark.yaml
    with:
      git-ref: ${{ github.event.inputs.git-ref }}
      instance_type: ${{ github.event.inputs.instance_type }}
      commands: ${{ toJSON(matrix.index.commands) }}
      time-to-wait: ${{ matrix.index.time_to_wait }}

  slack-notification:
    runs-on: ubuntu-20.04
    needs: [run-job]
    steps:
      - name: Slack Notification
        if: ${{ always() }}
        continue-on-error: true
        uses: rtCamp/action-slack-notify@12e36fc18b0689399306c2e0b3e0f2978b7f1ee7
        env:
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
          SLACK_ICON: https://pbs.twimg.com/profile_images/1274014582265298945/OjBKP9kn_400x400.png
          SLACK_COLOR: ${{ needs.run-job.result }}
          SLACK_MESSAGE: "Benchmark action: (${{ env.ACTION_RUN_URL }}) ended with result: ${{ needs.run-job.result }}"
          SLACK_USERNAME: ${{ secrets.BOT_USERNAME }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

