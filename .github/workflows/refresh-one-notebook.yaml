name: Refresh One Notebook
on:
  workflow_dispatch:
    inputs:
      notebook:
        # --- refresh_notebooks_list.py: refresh list of notebooks currently available [START] ---
        # --- do not edit, auto generated part by `make refresh_notebooks_list` ---
        description: "Notebook file name only in: \n
        - Cifar10 \n
        - CifarInFhe \n
        - CifarQuantizationAwareTraining \n
        - ClassifierComparison \n
        - ClientServer \n
        - ConvolutionalNeuralNetwork \n
        - DecisionTreeClassifier \n
        - FromImageNetToCifar \n
        - FullyConnectedNeuralNetwork \n
        - FullyConnectedNeuralNetworkOnMNIST \n
        - GLMComparison \n
        - KaggleTitanic \n
        - LinearRegression \n
        - LogisticRegression \n
        - mnist_in_fhe \n
        - PoissonRegression \n
        - QuantizationAwareTraining \n
        - SentimentClassification \n
        - XGBClassifier \n
        - XGBRegressor \n
        "
        # --- refresh_notebooks_list.py: refresh list of notebooks currently available [END] ---
        required: true

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: false

env:
  ACTION_RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
  # --- refresh_notebooks_list.py: refresh list of notebook paths currently available [START] ---
  # --- do not edit, auto generated part by `make refresh_notebooks_list` ---
  Cifar10: "use_case_examples/cifar_10_with_model_splitting/Cifar10.ipynb" 
  CifarInFhe: "use_case_examples/cifar_brevitas_finetuning/CifarInFhe.ipynb" 
  CifarQuantizationAwareTraining: "use_case_examples/cifar_brevitas_finetuning/CifarQuantizationAwareTraining.ipynb" 
  ClassifierComparison: "docs/advanced_examples/ClassifierComparison.ipynb" 
  ClientServer: "docs/advanced_examples/ClientServer.ipynb" 
  ConvolutionalNeuralNetwork: "docs/advanced_examples/ConvolutionalNeuralNetwork.ipynb" 
  DecisionTreeClassifier: "docs/advanced_examples/DecisionTreeClassifier.ipynb" 
  FromImageNetToCifar: "use_case_examples/cifar_brevitas_finetuning/FromImageNetToCifar.ipynb" 
  FullyConnectedNeuralNetwork: "docs/advanced_examples/FullyConnectedNeuralNetwork.ipynb" 
  FullyConnectedNeuralNetworkOnMNIST: "docs/advanced_examples/FullyConnectedNeuralNetworkOnMNIST.ipynb" 
  GLMComparison: "docs/advanced_examples/GLMComparison.ipynb" 
  KaggleTitanic: "use_case_examples/titanic/KaggleTitanic.ipynb" 
  LinearRegression: "docs/advanced_examples/LinearRegression.ipynb" 
  LogisticRegression: "docs/advanced_examples/LogisticRegression.ipynb" 
  mnist_in_fhe: "use_case_examples/mnist/mnist_in_fhe.ipynb" 
  PoissonRegression: "docs/advanced_examples/PoissonRegression.ipynb" 
  QuantizationAwareTraining: "docs/advanced_examples/QuantizationAwareTraining.ipynb" 
  SentimentClassification: "use_case_examples/sentiment-analysis-with-transformer/SentimentClassification.ipynb" 
  XGBClassifier: "docs/advanced_examples/XGBClassifier.ipynb" 
  XGBRegressor: "docs/advanced_examples/XGBRegressor.ipynb" 
  # --- refresh_notebooks_list.py: refresh list of notebook paths currently available [END] ---

jobs:
  start-runner-linux:
    name: Start EC2 runner
    runs-on: ubuntu-20.04
    outputs:
      label-38: ${{ steps.start-ec2-runner-38.outputs.label }}
      ec2-instance-id-38: ${{ steps.start-ec2-runner-38.outputs.ec2-instance-id || '' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Start EC2 runner python 38
        id: start-ec2-runner-38
        uses: machulav/ec2-github-runner@4e0303de215db88e1c489e07a15ca4d867f488ea
        with:
          mode: start
          github-token: ${{ secrets.EC2_RUNNER_BOT_TOKEN }}
          ec2-image-id: ${{ secrets.AWS_EC2_AMI }}
          ec2-instance-type: ${{ secrets.AWS_EC2_INSTANCE_TYPE }}
          subnet-id: ${{ secrets.AWS_EC2_SUBNET_ID }}
          security-group-id: ${{ secrets.AWS_EC2_SECURITY_GROUP_ID }}

  refresh-one-notebook:
    needs: [start-runner-linux]

    runs-on: ${{ needs.start-runner-linux.outputs.label-38 }}
    # Run in a clean container
    container:
      image: ubuntu:20.04
    defaults:
      run:
        shell: bash
    env:
      PIP_INDEX_URL: ${{ secrets.PIP_INDEX_URL }}
      PIP_EXTRA_INDEX_URL: ${{ secrets.PIP_EXTRA_INDEX_URL }}
      NOTEBOOK_NAME: ${{ github.event.inputs.notebook }}
      KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
      KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}

    steps:
      - name: Add masks
        run: |
          echo "::add-mask::${{ secrets.INTERNAL_PYPI_URL_FOR_MASK }}"
          echo "::add-mask::${{ secrets.INTERNAL_REPO_URL_FOR_MASK }}"

      # Replace default archive.ubuntu.com from docker image with fr mirror
      # original archive showed performance issues and is farther away
      - name: Docker container related setup and git installation
        run: |
          TZ=Europe/Paris
          echo "TZ=${TZ}" >> "$GITHUB_ENV"
          ln -snf /usr/share/zoneinfo/${TZ} /etc/localtime && echo ${TZ} > /etc/timezone
          sed -i 's|^deb http://archive|deb http://fr.archive|g' /etc/apt/sources.list
          apt update && apt install git -y

      - name: Checkout Code
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
        with:
          token: ${{ secrets.BOT_TOKEN }}

      - name: 'Set up Python 3.8'
        uses: actions/setup-python@5ccb29d8773c3f3f653e1705f474dfaa8a06a912
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          ./script/make_utils/setup_os_deps.sh
          make setup_env

      - name: Download Sentiment classification datasets
        if: ${{ env.NOTEBOOK_NAME == 'SentimentClassification' }}
        run: |
          source .venv/bin/activate
          cd ./use_case_examples/encrypted_sentiment_analysis && ./download_data.sh

      - name: Download Titanic datasets
        if: ${{ env.NOTEBOOK_NAME == 'KaggleTitanic' }}
        run: |
          source .venv/bin/activate
          cd ./use_case_examples/titanic && ./download_data.sh
          
      - name: Refresh One Notebook
        run: |
          make jupyter_execute_one NOTEBOOK="${{ env[env.NOTEBOOK_NAME] }}"
      
      # Pull the latest changes if there are some
      - name: Pull latest changes
        run: |
          git pull -X theirs

      # If the target branch is main or a release branch, a Pull Request is opened for everyone to 
      # review.
      - name: Open PR
        if: ${{ github.ref_name == 'main' || startsWith(github.ref_name , 'release/') }} 
        uses: peter-evans/create-pull-request@2b011faafdcbc9ceb11414d64d0573f37c774b04
        with:
          token: ${{ secrets.BOT_TOKEN }}
          commit-message: "chore: refresh ${{ github.event.inputs.notebook }} notebook"
          branch: "refresh-${{ github.event.inputs.notebook }}-notebook-for-${{ github.ref_name }}"
          base: "${{ github.ref_name }}"
          title: "Refresh ${{ github.event.inputs.notebook }} notebook for ${{ github.ref_name }}"
          body: "Automatic PR with notebook refresh of ${{ github.event.inputs.notebook }} \
            for ${{ github.ref_name }}."
          add-paths: |
            docs/**/*.ipynb
            use_case_examples/**/*.ipynb
      
      # If the target branch is another branch, the current branch is automatically merged into it
      - name: Push changes into the current branch
        if: ${{ github.ref_name != 'main' && !(startsWith(github.ref_name , 'release/')) }}
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "chore: refresh ${{ github.event.inputs.notebook }} notebook"
          add_options: '-u'


  stop-runner-linux:
    name: Stop EC2 runner
    needs: [refresh-one-notebook, start-runner-linux]
    runs-on: ubuntu-20.04
    if: ${{ always() && (needs.start-runner-linux.result != 'skipped') }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Stop EC2 runner python 38
        uses: machulav/ec2-github-runner@4e0303de215db88e1c489e07a15ca4d867f488ea
        if: ${{ always() && needs.start-runner-linux.outputs.ec2-instance-id-38 }}
        with:
          github-token: ${{ secrets.EC2_RUNNER_BOT_TOKEN }}
          label: ${{ needs.start-runner-linux.outputs.label-38 }}
          ec2-instance-id: ${{ needs.start-runner-linux.outputs.ec2-instance-id-38 }}
          mode: stop

  send-report:
    if: ${{ github.ref_name == 'main' || startsWith(github.ref_name , 'release/') }} 
    needs:
      [
        start-runner-linux,
        refresh-one-notebook,
        stop-runner-linux,
      ]

    # If the target branch is main or a release branch, a slack notification is sent
    name: Send Slack notification
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c

      - name: Prepare whole job status
        if: ${{ always() }}
        continue-on-error: true
        env:
          NEEDS_JSON: ${{ toJSON(needs) }}
        run: |
          echo "${NEEDS_JSON}" > /tmp/needs_context.json
          JOB_STATUS=$(python3 ./script/actions_utils/actions_combine_status.py \
          --needs_context_json /tmp/needs_context.json)
          echo "JOB_STATUS=${JOB_STATUS}" >> "$GITHUB_ENV"

      - name: Slack Notification
        continue-on-error: true
        uses: rtCamp/action-slack-notify@12e36fc18b0689399306c2e0b3e0f2978b7f1ee7
        env:
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
          SLACK_ICON: https://pbs.twimg.com/profile_images/1274014582265298945/OjBKP9kn_400x400.png
          SLACK_COLOR: ${{ env.JOB_STATUS || 'failure' }}
          SLACK_MESSAGE: "Refreshing ${{ github.event.inputs.notebook }} for ${{ github.ref_name }} 
            finished with status ${{ env.JOB_STATUS || 'failure' }} (${{ env.ACTION_RUN_URL }})\n\
            - start-runner-linux: ${{ needs.start-runner-linux.result || 'Did not run.'}}\n\n\
            - refresh-one-notebook: ${{ needs.refresh-one-notebook.result || 'Did not run.' }}\n\n\
            - stop-runner-linux: ${{ needs.stop-runner-linux.result || 'Did not run.'}}"
          SLACK_USERNAME: ${{ secrets.BOT_USERNAME }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
