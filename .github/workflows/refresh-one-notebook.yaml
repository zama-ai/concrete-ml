name: Refresh One Notebook
on:
  workflow_dispatch:
    inputs:
      notebook:
        # --- refresh_notebooks_list.py: refresh list of notebooks currently available [START] ---
        # --- do not edit, auto generated part by `make refresh_notebooks_list` ---
        type: choice
        description: Notebook file name
        options:
        - CifarInFhe
        - CifarInFheWithSmallerAccumulators
        - CifarQuantizationAwareTraining
        - ClassifierComparison
        - ClientServer
        - ConvolutionalNeuralNetwork
        - CreditScoring
        - DecisionTreeClassifier
        - DecisionTreeRegressor
        - EncryptedPandas
        - ExperimentPrivacyTreePaper
        - FromImageNetToCifar
        - FullyConnectedNeuralNetwork
        - FullyConnectedNeuralNetworkOnMNIST
        - GLMComparison
        - GPT2FineTuneHybrid
        - HealthCarePrediction
        - ImportingFromScikitLearn
        - KaggleTitanic
        - KNearestNeighbors
        - LinearRegression
        - LinearSVR
        - LLamaFineTuning
        - LogisticRegression
        - LogisticRegressionTraining
        - LoraMLP
        - MathEvalLoraLLama
        - PerrorImpactOnFMNIST
        - PoissonRegression
        - QGPT2Evaluate
        - QuantFrameworkExample
        - QuantizationAwareTraining
        - RegressorComparison
        - SentimentClassification
        - SVMClassifier
        - WhitePaperExperiments
        - XGBClassifier
        - XGBRegressor

        # --- refresh_notebooks_list.py: refresh list of notebooks currently available [END] ---
        required: true

concurrency:
  group: "${{ github.ref }}-${{ github.event_name }}-${{ github.workflow }}-${{ github.event.inputs.notebook }}"
  cancel-in-progress: false

env:
  ACTION_RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
  SLAB_PROFILE: m6i
  # --- refresh_notebooks_list.py: refresh list of notebook paths currently available [START] ---
  # --- do not edit, auto generated part by `make refresh_notebooks_list` ---
  CifarInFhe: "use_case_examples/cifar/cifar_brevitas_finetuning/CifarInFhe.ipynb" 
  CifarInFheWithSmallerAccumulators: "use_case_examples/cifar/cifar_brevitas_finetuning/CifarInFheWithSmallerAccumulators.ipynb" 
  CifarQuantizationAwareTraining: "use_case_examples/cifar/cifar_brevitas_finetuning/CifarQuantizationAwareTraining.ipynb" 
  ClassifierComparison: "docs/advanced_examples/ClassifierComparison.ipynb" 
  ClientServer: "docs/advanced_examples/ClientServer.ipynb" 
  ConvolutionalNeuralNetwork: "docs/advanced_examples/ConvolutionalNeuralNetwork.ipynb" 
  CreditScoring: "use_case_examples/credit_scoring/CreditScoring.ipynb" 
  DecisionTreeClassifier: "docs/advanced_examples/DecisionTreeClassifier.ipynb" 
  DecisionTreeRegressor: "docs/advanced_examples/DecisionTreeRegressor.ipynb" 
  EncryptedPandas: "docs/advanced_examples/EncryptedPandas.ipynb" 
  ExperimentPrivacyTreePaper: "docs/advanced_examples/ExperimentPrivacyTreePaper.ipynb" 
  FromImageNetToCifar: "use_case_examples/cifar/cifar_brevitas_finetuning/FromImageNetToCifar.ipynb" 
  FullyConnectedNeuralNetwork: "docs/advanced_examples/FullyConnectedNeuralNetwork.ipynb" 
  FullyConnectedNeuralNetworkOnMNIST: "docs/advanced_examples/FullyConnectedNeuralNetworkOnMNIST.ipynb" 
  GLMComparison: "docs/advanced_examples/GLMComparison.ipynb" 
  GPT2FineTuneHybrid: "use_case_examples/lora_finetuning/GPT2FineTuneHybrid.ipynb" 
  HealthCarePrediction: "use_case_examples/disease_prediction/HealthCarePrediction.ipynb" 
  ImportingFromScikitLearn: "docs/advanced_examples/ImportingFromScikitLearn.ipynb" 
  KaggleTitanic: "use_case_examples/titanic/KaggleTitanic.ipynb" 
  KNearestNeighbors: "docs/advanced_examples/KNearestNeighbors.ipynb" 
  LinearRegression: "docs/advanced_examples/LinearRegression.ipynb" 
  LinearSVR: "docs/advanced_examples/LinearSVR.ipynb" 
  LLamaFineTuning: "use_case_examples/lora_finetuning/LLamaFineTuning.ipynb" 
  LogisticRegression: "docs/advanced_examples/LogisticRegression.ipynb" 
  LogisticRegressionTraining: "docs/advanced_examples/LogisticRegressionTraining.ipynb" 
  LoraMLP: "docs/advanced_examples/LoraMLP.ipynb" 
  MathEvalLoraLLama: "use_case_examples/lora_finetuning/MathEvalLoraLLama.ipynb" 
  PerrorImpactOnFMNIST: "use_case_examples/cifar/cifar_brevitas_finetuning/PerrorImpactOnFMNIST.ipynb" 
  PoissonRegression: "docs/advanced_examples/PoissonRegression.ipynb" 
  QGPT2Evaluate: "use_case_examples/llm/QGPT2Evaluate.ipynb" 
  QuantFrameworkExample: "use_case_examples/llm/QuantFrameworkExample.ipynb" 
  QuantizationAwareTraining: "docs/advanced_examples/QuantizationAwareTraining.ipynb" 
  RegressorComparison: "docs/advanced_examples/RegressorComparison.ipynb" 
  SentimentClassification: "use_case_examples/sentiment_analysis_with_transformer/SentimentClassification.ipynb" 
  SVMClassifier: "docs/advanced_examples/SVMClassifier.ipynb" 
  WhitePaperExperiments: "use_case_examples/white_paper_experiment/WhitePaperExperiments.ipynb" 
  XGBClassifier: "docs/advanced_examples/XGBClassifier.ipynb" 
  XGBRegressor: "docs/advanced_examples/XGBRegressor.ipynb" 
  # --- refresh_notebooks_list.py: refresh list of notebook paths currently available [END] ---
  SLAB_PROFILE: "pr_ciprofile"

jobs:
  start-runner-linux:
    name: Start Slab runner (Linux)
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    outputs:
      label-38: ${{ steps.start-slab-runner-38.outputs.label }}
      slab-instance-id-38: ${{ steps.start-slab-runner-38.outputs.slab-instance-id || '' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Start SLAB runner python 38
        id: start-slab-runner-38
        if: ${{ !cancelled() }}
        uses: zama-ai/slab-github-runner@79939325c3c429837c10d6041e4fd8589d328bac
        with:
          mode: start
          github-token: ${{ secrets.SLAB_ACTION_TOKEN }}
          slab-url: ${{ secrets.SLAB_BASE_URL }}
          job-secret: ${{ secrets.JOB_SECRET }}
          backend: aws
          profile: ${{ env.SLAB_PROFILE }}

  refresh-one-notebook:
    needs: [start-runner-linux]

    runs-on: ${{ needs.start-runner-linux.outputs.label }}
    # Run in a clean container
    container:
      image: ubuntu:20.04
    defaults:
      run:
        shell: bash
    env:
      PIP_INDEX_URL: ${{ secrets.PIP_INDEX_URL }}
      NOTEBOOK_NAME: ${{ github.event.inputs.notebook }}
      KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
      KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}

    steps:
      - name: Add masks
        run: |
          echo "::add-mask::${{ secrets.INTERNAL_PYPI_URL_FOR_MASK }}"
          echo "::add-mask::${{ secrets.INTERNAL_REPO_URL_FOR_MASK }}"

      # Replace default archive.ubuntu.com from docker image with fr mirror
      # original archive showed performance issues and is farther away
      - name: Docker container related setup and git installation
        run: |
          TZ=Europe/Paris
          echo "TZ=${TZ}" >> "$GITHUB_ENV"
          ln -snf /usr/share/zoneinfo/${TZ} /etc/localtime && echo ${TZ} > /etc/timezone
          sed -i 's|^deb http://archive|deb http://fr.archive|g' /etc/apt/sources.list
          apt update && apt install git git-lfs -y

      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          token: ${{ secrets.BOT_TOKEN }}
          lfs: true

      - name: 'Set up Python 3.8'
        uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          ./script/make_utils/setup_os_deps.sh
          make setup_env
          
      - name: Refresh ${{ github.event.inputs.notebook }}
        run: |
          make jupyter_execute_one NOTEBOOK="${{ env[env.NOTEBOOK_NAME] }}"
      
      # Pull the latest changes if there are some
      - name: Pull latest changes
        run: |
          git pull -X theirs

      # If the target branch is main or a release branch, a Pull Request is opened for everyone to 
      # review.
      - name: Open PR
        if: ${{ github.ref_name == 'main' || startsWith(github.ref_name , 'release/') }} 
        uses: peter-evans/create-pull-request@271a8d0340265f705b14b6d32b9829c1cb33d45e
        with:
          token: ${{ secrets.BOT_TOKEN }}
          commit-message: "chore: refresh ${{ github.event.inputs.notebook }} notebook"
          branch: "refresh-${{ github.event.inputs.notebook }}-notebook-for-branch-${{ github.ref_name }}"
          base: "${{ github.ref_name }}"
          title: "Refresh ${{ github.event.inputs.notebook }} notebook for branch ${{ github.ref_name }}"
          body: "Automatic PR with notebook refresh of ${{ github.event.inputs.notebook }} \
            for branch ${{ github.ref_name }}."
          add-paths: |
            docs/**/*.ipynb
            use_case_examples/**/*.ipynb
      
      # If the target branch is another branch, the current branch is automatically merged into it
      - name: Push changes into the current branch
        if: ${{ github.ref_name != 'main' && !(startsWith(github.ref_name , 'release/')) }}
        uses: stefanzweifel/git-auto-commit-action@e348103e9026cc0eee72ae06630dbe30c8bf7a79 #v5.1.0
        with:
          commit_message: "chore: refresh ${{ github.event.inputs.notebook }} notebook"
          add_options: '-u'
          file_pattern: |
            docs/**/*.ipynb
            use_case_examples/**/*.ipynb


  stop-runner-linux:
    name: Stop Slab runner (Linux)
    needs: [refresh-one-notebook, start-runner-linux]
    runs-on: ubuntu-20.04
    timeout-minutes: 2
    if: ${{ always() && (needs.start-runner-linux.result != 'skipped') }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Stop SLAB runner python 38
        if: ${{ always() && needs.start-runner-linux.outputs.slab-instance-id-38 }}
        uses: zama-ai/slab-github-runner@79939325c3c429837c10d6041e4fd8589d328bac
        with:
          mode: stop
          github-token: ${{ secrets.SLAB_ACTION_TOKEN }}
          slab-url: ${{ secrets.SLAB_BASE_URL }}
          job-secret: ${{ secrets.JOB_SECRET }}
          label: ${{ needs.start-runner-linux.outputs.label-38 }}

  send-report:
    if: ${{ github.ref_name == 'main' || startsWith(github.ref_name , 'release/') }} 
    needs:
      [
        start-runner-linux,
        refresh-one-notebook,
        stop-runner-linux,
      ]

    # If the target branch is main or a release branch, a slack notification is sent
    name: Send Slack notification
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Prepare whole job status
        if: ${{ always() }}
        continue-on-error: true
        env:
          NEEDS_JSON: ${{ toJSON(needs) }}
        run: |
          echo "${NEEDS_JSON}" > /tmp/needs_context.json
          JOB_STATUS=$(python3 ./script/actions_utils/actions_combine_status.py \
          --needs_context_json /tmp/needs_context.json)
          echo "JOB_STATUS=${JOB_STATUS}" >> "$GITHUB_ENV"

      - name: Slack Notification
        continue-on-error: true
        uses: rtCamp/action-slack-notify@c33737706dea87cd7784c687dadc9adf1be59990
        env:
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
          SLACK_ICON: https://pbs.twimg.com/profile_images/1274014582265298945/OjBKP9kn_400x400.png
          SLACK_COLOR: ${{ env.JOB_STATUS || 'failure' }}
          SLACK_MESSAGE: "Refreshing ${{ github.event.inputs.notebook }} for ${{ github.ref_name }} 
            finished with status ${{ env.JOB_STATUS || 'failure' }} (${{ env.ACTION_RUN_URL }})\n\
            - start-runner-linux: ${{ needs.start-runner-linux.result || 'Did not run.'}}\n\n\
            - refresh-one-notebook: ${{ needs.refresh-one-notebook.result || 'Did not run.' }}\n\n\
            - stop-runner-linux: ${{ needs.stop-runner-linux.result || 'Did not run.'}}"
          SLACK_USERNAME: ${{ secrets.BOT_USERNAME }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
