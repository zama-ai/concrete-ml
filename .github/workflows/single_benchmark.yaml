# This workflow is called by new_generation_benchmarks.yaml
name: Single benchmark
on:
  workflow_call:
    inputs:
      commands:
        type: string
        required: true
        description: "The list of commands to launch the benchmark. (like: python3 benchmarks/classification.py --classifiers RandomForestClassifier --datasets credit-g --configs '{\\\"max_depth\\\": 3, \\\"n_estimators\\\": 10, \\\"n_bits\\\": 2}')"
      git-ref:
        description: "Repo reference (branch, tag or SHA)"
        default: "main"
        required: true
        type: string
      time-to-wait:
        description: "Time to wait before starting workflow (to avoid AWS limit)"
        default: "0s"
        type: string
      instance_type:
        description: Instance type on which to launch benchmarks
        default: "c5.4xlarge"
        type: string
    secrets:
      NEW_ML_PROGRESS_TRACKER_TOKEN:
        description: "ML progress tracker token"
      NEW_ML_PROGRESS_TRACKER_URL:
        description: "ML progress tracker url"
      PIP_INDEX_URL:
        description: "pip index url"
      PIP_EXTRA_INDEX_URL:
        description: "Internal repo url"
      INTERNAL_PYPI_URL:
        description: "Internal pypi url"
      INTERNAL_REPO_URL:
        description: "Internal repo url"
      AWS_ACCESS_KEY_ID:
        description: "AWS access key"
      AWS_SECRET_ACCESS_KEY:
        description: "AWS secret key"
      AWS_REGION:
        description: "AWS region"
      BENCHMARKS_AWS_REGION:
        description: "AWS region"
      EC2_RUNNER_BOT_TOKEN:
        description: "EC2 Runner bot token"
      AWS_EC2_AMI:
        description: "AWS EC2 AMI"
      AWS_EC2_INSTANCE_TYPE:
        description: "AWS EC2 Instance type"
      AWS_EC2_SUBNET_ID:
        description: "AWS EC2 Subnet id"
      AWS_EC2_SECURITY_GROUP_ID:
        description: "AWS EC2 security group id"
      INTERNAL_PYPI_URL_FOR_MASK:
        description: "Used for masking"
      INTERNAL_REPO_URL_FOR_MASK:
        description: "Used for masking"

env:
  AGENT_TOOLSDIRECTORY: /opt/hostedtoolcache
  RUNNER_TOOL_CACHE: /opt/hostedtoolcache

jobs:
  wait:  # Needed to avoid launching too many instances at once
    name: Wait
    runs-on: ubuntu-20.04
    steps:
      - name: Wait
        run: |
          # From inputs
          echo ${{ inputs.time-to-wait }}
          sleep ${{ inputs.time-to-wait }}

  start-ec2:
    name: Start EC2
    runs-on: ubuntu-20.04
    outputs:
      # Needed to shutdown the proper instance
      label: ${{ steps.start-ec2-runner.outputs.label }}
      instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Add masks
        run: |
          echo "::add-mask::${{ secrets.INTERNAL_PYPI_URL_FOR_MASK }}"
          echo "::add-mask::${{ secrets.INTERNAL_REPO_URL_FOR_MASK }}"
          echo "::add-mask::${{ secrets.INTERNAL_PYPI_URL }}"
          echo "::add-mask::${{ secrets.INTERNAL_REPO_URL }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Start EC2 runner
        id: start-ec2-runner
        if: ${{ !cancelled() }}
        uses: machulav/ec2-github-runner@4e0303de215db88e1c489e07a15ca4d867f488ea
        with:
          mode: start
          github-token: ${{ secrets.EC2_RUNNER_BOT_TOKEN }}
          ec2-image-id: ${{ secrets.AWS_EC2_AMI }}
          ec2-instance-type: ${{ github.event.inputs.instance_type }}
          subnet-id: ${{ secrets.AWS_EC2_SUBNET_ID }}
          security-group-id: ${{ secrets.AWS_EC2_SECURITY_GROUP_ID }}
          aws-resource-tags: >
            [
              {"Key": "Name", "Value": "cml-benchmark-ec2-github-runner"},
              {"Key": "GitHubRepository", "Value": "${{ github.repository }}"},
              {"Key": "Python version", "Value": "3.9"},
              {"Key": "Actor", "Value": "${{ github.actor }}"},
              {"Key": "Action", "Value": "${{ github.action }}"},
              {"Key": "GitHash", "Value": "${{ github.sha }}"},
              {"Key": "RefName", "Value": "${{ github.ref_name }}"},
              {"Key": "RunId", "Value": "${{ github.run_id }}"},
              {"Key": "TargetGitRef", "Value": "${{ github.event.inputs.git-ref }}"},
              {"Key": "Team", "Value": "CML"}
            ]

  run-command:
    name: Run benchmarks
    runs-on: ${{ needs.start-ec2.outputs.label }}
    needs: [start-ec2]
    container:
      image: ubuntu:20.04
    defaults:
      run:
        shell: bash
    env:
      PIP_INDEX_URL: ${{ secrets.PIP_INDEX_URL }}
      PIP_EXTRA_INDEX_URL: ${{ secrets.PIP_EXTRA_INDEX_URL }}
    steps:
      - name: Add masks
        id: masks
        run: |
          echo "::add-mask::${{ secrets.INTERNAL_PYPI_URL_FOR_MASK }}"
          echo "::add-mask::${{ secrets.INTERNAL_REPO_URL_FOR_MASK }}"
          echo "::add-mask::${{ secrets.INTERNAL_PYPI_URL }}"
          echo "::add-mask::${{ secrets.INTERNAL_REPO_URL }}"

      - name: Docker container related setup and git installation
        id: docker-git-config
        run: |
          TZ=Europe/Paris
          echo "TZ=${TZ}" >> "$GITHUB_ENV"
          ln -snf /usr/share/zoneinfo/${TZ} /etc/localtime && echo ${TZ} > /etc/timezone
          sed -i 's|^deb http://archive|deb http://fr.archive|g' /etc/apt/sources.list
          apt update && apt install git git-lfs -y
          apt -y install sudo

      # Install specific version
      - name: Checkout CML to install
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
        with:
          fetch-depth: 1
          lfs: false
          ref: ${{ github.event.inputs.git-ref }}
          path: ./cml_to_install

      - name: Set up Python
        uses: actions/setup-python@5ccb29d8773c3f3f653e1705f474dfaa8a06a912
        with:
          python-version: "3.9"

      - name: Install dependencies
        id: install-deps
        uses: nick-fields/retry@v2
        with:
          max_attempts: 5
          timeout_minutes: 20
          retry_wait_seconds: 5
          shell: bash
          command: |
            cd ./cml_to_install
            # The python-dev version should be in sync with the one from the previous step
            apt-get install --no-install-recommends -y gnome-keyring
            apt install -y graphviz* graphviz-dev libgraphviz-dev pkg-config python3.9-dev
            apt-mark hold docker.io
            ./script/make_utils/setup_os_deps.sh
            # Needed for some reason
            make setup_env
            source ./.venv/bin/activate
            python -m pip show concrete-numpy

      # Run with current version
      - name: Checkout CML to run
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
        with:
          fetch-depth: 1
          lfs: false
          path: ./cml_to_run

      # Now we get our most up to date version
      - name: Run the benchmark command
        # 34 days * 24 hours * 60 minutes 
        # Workflow limit is 35 days
        # No apparent limit on job/step time
        # https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners#usage-limits
        timeout-minutes: 48960
        id: run-benchmark
        shell: bash
        run: |
          source ./cml_to_install/.venv/bin/activate
          cd ./cml_to_run

          printf '%s' '${{ inputs.commands }}' >> commands.json
          python ./script/actions_utils/run_commands.py --file commands.json

      - name: Convert progress.json
        id: convert-output
        run: |
          source ./cml_to_install/.venv/bin/activate
          python ./cml_to_run/benchmarks/convert.py --source ./cml_to_run/progress.json --target ./converted.json --path_to_repository ./cml_to_install --machine_name "${{ github.event.inputs.instance_type }}"
          cat ./converted.json | jq

      - name: Upload results
        id: upload-results
        run: |
          curl \
          -H "Authorization: Bearer ${{ secrets.NEW_ML_PROGRESS_TRACKER_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d @converted.json \
          -X POST "${{ secrets.NEW_ML_PROGRESS_TRACKER_URL }}experiment"

  shutdown-ec2:
    name: Shutdown EC2
    runs-on: ubuntu-20.04
    needs: [start-ec2, run-command]
    if: ${{ always() }}  # Always shutdown instances
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Shutdown EC2 runner
        id: shutdown-ec2-runner
        if: ${{ always() }}
        uses: machulav/ec2-github-runner@4e0303de215db88e1c489e07a15ca4d867f488ea
        with:
          mode: stop
          label: ${{ needs.start-ec2.outputs.label }}
          github-token: ${{ secrets.EC2_RUNNER_BOT_TOKEN }}
          ec2-instance-id: ${{ needs.start-ec2.outputs.instance-id }}
